(progn
  (declare 'creature (lambda '(n h) '(lambda '(a) (copy '(cond ((eq a 'name) n) ((eq a 'health) h))))))
  (declare 'nth (lambda '(n l) '(cond ((= n 0) (car l)) (t (nth (- n 1) (cdr l))))))
  (declare 'randelt (lambda '(l) '(nth (random (length l)) l)))
  (declare '*names* '(Zombie Skeleton Ghost Ghoul Necromancer))
  (declare 'creatures (lambda '(n) '(cond ((> n 0) (cons (creature (randelt *names*) (+ 10 (random 10))) (creatures (- n 1)))))))
  (declare 'print_creature (lambda '(c) '(progn (print (c 'name)) (print ':) (print (c 'health)) (terpri))))
  (declare 'mapcar (lambda '(f l) '(cond (l (cons (f (car l)) (mapcar f (cdr l)))))))
  (declare '*baddies* (creatures (progn (print '#?) (read 20))))
  (declare 'damage (lambda '(c) '(progn (define 'health (c 'health)) (set health (cond ((> health 0) (- health 1)) (t 0))))))
  (mapcar print_creature *baddies*)
  (declare 'loop (lambda nil '(progn (define 'input (read 200))
				     (cond ((eq (car input) 'damage) (damage (nth (car (cdr input)) *baddies*))))
				     (cond ((null (eq input 'quit)) (progn (mapcar print_creature *baddies*) (loop))))
				     nil)))
  (loop)
  t)
